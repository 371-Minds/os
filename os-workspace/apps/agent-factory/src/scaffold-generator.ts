/**
 * Scaffold Generator - Creates agent body applications using nx-workspace plugin
 * Leverages ElizaOS self-awareness capabilities to generate complete agent projects
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import {
  ScaffoldRequest,
  ScaffoldResponse,
  ScaffoldGeneratorConfig,
  BuildConfiguration,
  PackageDependency
} from './types';

export class ScaffoldGenerator {
  private config: ScaffoldGeneratorConfig;

  constructor(config: ScaffoldGeneratorConfig) {
    this.config = config;
    console.log('[ScaffoldGenerator] Initialized');
  }

  /**
   * Generates complete agent scaffold using nx-workspace plugin
   */
  public async generateAgentScaffold(request: ScaffoldRequest): Promise<ScaffoldResponse> {
    console.log(`[ScaffoldGenerator] Generating scaffold for agent: ${request.agentId}`);

    try {
      const projectPath = await this.createProjectDirectory(request.agentId);
      const generatedFiles = await this.generateProjectFiles(request, projectPath);
      const buildConfiguration = this.createBuildConfiguration(request);
      
      await this.generateNxProjectConfiguration(request, projectPath);

      return {
        success: true,
        projectPath,
        generatedFiles,
        buildConfiguration
      };

    } catch (error) {
      return {
        success: false,
        generatedFiles: [],
        buildConfiguration: this.createDefaultBuildConfiguration(),
        error: error instanceof Error ? error.message : 'Unknown scaffolding error'
      };
    }
  }

  private async createProjectDirectory(agentId: string): Promise<string> {
    const projectPath = path.join(this.config.nxWorkspaceRoot, 'apps', agentId);
    await fs.mkdir(path.join(projectPath, 'src', 'lib'), { recursive: true });
    return projectPath;
  }

  private async generateProjectFiles(request: ScaffoldRequest, projectPath: string): Promise<string[]> {
    const files: string[] = [];

    // Package.json
    const packageJson = {
      name: request.agentId,
      version: '1.0.0',
      description: `Autonomous agent for ${request.capabilities.join(', ')}`,
      main: 'src/index.ts',
      scripts: {
        start: 'bun run src/index.ts',
        build: 'bun run build:tsc',
        'build:tsc': 'tsc -p tsconfig.app.json'
      },
      dependencies: {
        '@elizaos/core': '^1.5.2',
        '@elizaos/plugin-blockchain-registry': 'workspace:*',
        uuid: '^9.0.0'
      },
      devDependencies: {
        '@types/node': '^20.0.0',
        '@types/uuid': '^9.0.0',
        typescript: '^5.0.0'
      }
    };

    const packagePath = path.join(projectPath, 'package.json');
    await fs.writeFile(packagePath, JSON.stringify(packageJson, null, 2));
    files.push(packagePath);

    // TypeScript config
    const tsConfig = {
      extends: '../../tsconfig.base.json',
      compilerOptions: {
        outDir: `../../dist/apps/${request.agentId}`,
        module: 'ESNext',
        target: 'ES2022'
      },
      include: ['src/**/*']
    };

    const tsConfigPath = path.join(projectPath, 'tsconfig.app.json');
    await fs.writeFile(tsConfigPath, JSON.stringify(tsConfig, null, 2));
    files.push(tsConfigPath);

    // Main application
    const mainContent = `/**
 * ${request.agentId} - Autonomous Agent
 * Generated by Agent Factory
 */

import { Agent, AgentConfig, Character } from '@elizaos/core';

export class ${this.getAgentClassName(request)} extends Agent {
  constructor(config?: Partial<AgentConfig>) {
    const character: Character = {
      name: '${request.agentId}',
      bio: ['Autonomous agent for ${request.capabilities.join(', ')}'],
      lore: ['Created through Agent Factory spawning system'],
      knowledge: request.capabilities,
      messageExamples: [[]],
      postExamples: [],
      people: [],
      topics: request.capabilities,
      style: {
        all: ['Professional and focused'],
        chat: ['Concise responses'],
        post: ['Informative']
      },
      adjectives: ['specialized', 'autonomous', 'reliable']
    };

    super({ ...config, character, actions: [], providers: [], evaluators: [] });
  }

  async initialize(): Promise<void> {
    console.log('[${request.agentId}] Initializing...');
    await super.initialize();
  }

  async start(): Promise<void> {
    await this.initialize();
    console.log('[${request.agentId}] Started successfully');
  }

  async shutdown(): Promise<void> {
    console.log('[${request.agentId}] Shutting down...');
  }
}

async function main() {
  const agent = new ${this.getAgentClassName(request)}();
  await agent.start();
  
  process.on('SIGINT', async () => {
    await agent.shutdown();
    process.exit(0);
  });
}

if (require.main === module) {
  main().catch(console.error);
}
`;

    const mainPath = path.join(projectPath, 'src', 'index.ts');
    await fs.writeFile(mainPath, mainContent);
    files.push(mainPath);

    return files;
  }

  private async generateNxProjectConfiguration(request: ScaffoldRequest, projectPath: string): Promise<void> {
    const projectConfig = {
      name: request.agentId,
      $schema: '../../node_modules/nx/schemas/project-schema.json',
      sourceRoot: `apps/${request.agentId}/src`,
      projectType: 'application',
      targets: {
        build: {
          executor: '@nx/js:tsc',
          options: {
            outputPath: `dist/apps/${request.agentId}`,
            tsConfig: `apps/${request.agentId}/tsconfig.app.json`,
            main: `apps/${request.agentId}/src/index.ts`
          }
        },
        serve: {
          executor: '@nx/js:node',
          options: {
            buildTarget: `${request.agentId}:build`
          }
        }
      }
    };

    await fs.writeFile(
      path.join(projectPath, 'project.json'),
      JSON.stringify(projectConfig, null, 2)
    );
  }

  private createBuildConfiguration(request: ScaffoldRequest): BuildConfiguration {
    return {
      buildCommand: `bun nx build ${request.agentId}`,
      outputDirectory: `dist/apps/${request.agentId}`,
      dockerFile: this.generateDockerFileContent(),
      environmentVariables: {
        NODE_ENV: 'production',
        AGENT_ID: request.agentId
      },
      dependencies: [
        { name: '@elizaos/core', version: '^1.5.2', type: 'runtime' },
        { name: 'uuid', version: '^9.0.0', type: 'runtime' }
      ]
    };
  }

  private createDefaultBuildConfiguration(): BuildConfiguration {
    return {
      buildCommand: 'bun run build',
      outputDirectory: 'dist',
      environmentVariables: {},
      dependencies: []
    };
  }

  private generateDockerFileContent(): string {
    return `FROM oven/bun:latest
WORKDIR /app
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile
COPY . .
RUN bun run build
EXPOSE 3000
CMD ["bun", "run", "start"]`;
  }

  private getAgentClassName(request: ScaffoldRequest): string {
    return request.agentId
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join('') + 'Agent';
  }

  public async healthCheck(): Promise<{ healthy: boolean; details?: any }> {
    try {
      await fs.access(this.config.nxWorkspaceRoot);
      return { healthy: true, details: { workspace: this.config.nxWorkspaceRoot } };
    } catch (error) {
      return { healthy: false, details: { error: error instanceof Error ? error.message : 'Unknown' } };
    }
  }
}