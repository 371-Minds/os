# ============================================================================
# 371 OS - DAO Governance Service - Production Environment Configuration
# ============================================================================
#
# This is an EXAMPLE configuration file. Copy this to .env.production and
# fill in your actual production credentials.
#
# SECURITY WARNING: Never commit .env.production to git!
# This file (.env.example) is safe to commit as it contains no real secrets.
#
# Usage:
#   1. Copy this file: cp .env.example .env.production
#   2. Fill in your production credentials below
#   3. Import using: Get-Content .env.production | ForEach-Object { ... }
#      OR use the interactive wizard: node setup-production-secrets.js
#
# ============================================================================

# ----------------------------------------------------------------------------
# DATABASE CONFIGURATION
# ----------------------------------------------------------------------------
# Your production database credentials (TiDB Cloud, PostgreSQL, etc.)
#
# Where to get these:
#   - TiDB Cloud: https://tidbcloud.com/ → Create Cluster → Connection Details
#   - DigitalOcean: https://cloud.digitalocean.com/databases → Create Database
#   - Supabase: https://supabase.com/ → New Project → Database Settings
#
# Security: The password will be stored as encrypted when imported
# ----------------------------------------------------------------------------

# Database username (usually auto-generated by your provider)
# Example: "dao_governance_user", "admin", "root"
DAO_GOVERNANCE_DB_USERNAME=your_database_username_here

# Database password (use a strong password: 20+ characters)
# Example: "Tr0ng!P@ssw0rd#2025!Secure"
# NOTE: Will be marked as encrypted during import
DAO_GOVERNANCE_DB_PASSWORD=your_secure_database_password_here

# Database host/endpoint (full hostname or IP address)
# Example: "gateway01.us-west-2.prod.aws.tidbcloud.com"
# Example: "postgres-do-user-123456-0.db.ondigitalocean.com"
# Example: "db.abc123xyz.supabase.co"
DAO_GOVERNANCE_DB_HOST=your_database_host_here

# Database port (5432 for PostgreSQL, 4000 for TiDB)
# Default: 5432 (PostgreSQL), 4000 (TiDB), 3306 (MySQL)
DAO_GOVERNANCE_DB_PORT=5432


# ----------------------------------------------------------------------------
# NOVU NOTIFICATION SERVICE
# ----------------------------------------------------------------------------
# Novu provides the notification infrastructure for governance alerts
#
# Where to get these:
#   - Sign up: https://novu.co/
#   - Get API Key: Dashboard → Settings → API Keys
#   - Copy the "API Key" (starts with "novu_")
#
# Security: The API key will be stored as encrypted when imported
# ----------------------------------------------------------------------------

# Novu API Key (keep this secret!)
# Example: "novu_sk_abc123xyz456def789..."
# NOTE: Will be marked as encrypted during import
NOVU_API_KEY=your_novu_api_key_here

# Novu API URL (usually the default unless self-hosting)
# Default: https://api.novu.co
# Self-hosted example: https://novu.yourdomain.com/api
NOVU_API_URL=https://api.novu.co


# ----------------------------------------------------------------------------
# BLOCKCHAIN RPC CONFIGURATION (Optional)
# ----------------------------------------------------------------------------
# Blockchain RPC endpoint for on-chain governance interactions
#
# Where to get these:
#   - Infura: https://infura.io/ → Create Project → Get Endpoint
#   - Alchemy: https://www.alchemy.com/ → Create App → Get API Key
#   - QuickNode: https://www.quicknode.com/ → Create Endpoint
#   - Or use your own blockchain node
#
# Security: The API key will be stored as encrypted when imported
# NOTE: If you don't need blockchain integration, leave these commented out
# ----------------------------------------------------------------------------

# Blockchain RPC endpoint URL
# Example: "https://mainnet.infura.io/v3/YOUR_PROJECT_ID"
# Example: "https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY"
# Example: "https://your-quicknode-endpoint.discover.quiknode.pro/your-key/"
# BLOCKCHAIN_RPC_URL=your_blockchain_rpc_url_here

# Blockchain API Key or Project ID (if required by your provider)
# Example: "abc123xyz456def789" (Infura project ID)
# Example: "YOUR_ALCHEMY_API_KEY" (Alchemy API key)
# NOTE: Will be marked as encrypted during import
# NOTE: Some providers include the key in the URL, so this may not be needed
# BLOCKCHAIN_API_KEY=your_blockchain_api_key_here


# ============================================================================
# ADDITIONAL CONFIGURATION (Optional)
# ============================================================================

# ----------------------------------------------------------------------------
# APPLICATION SETTINGS
# ----------------------------------------------------------------------------
# These are optional - defaults are usually fine for production
# ----------------------------------------------------------------------------

# Node environment (should be "production" for production deployment)
# NODE_ENV=production

# Application host (0.0.0.0 allows external connections)
# HOST=0.0.0.0

# Application port (default: 3000)
# PORT=3000

# Zero-Trust mode (should be "true" for production)
# ZERO_TRUST_MODE=true

# Allowed CORS origins (comma-separated)
# Example: "https://app.371minds.com,https://admin.371minds.com"
# ALLOWED_ORIGINS=https://app.371minds.com


# ----------------------------------------------------------------------------
# LOGGING CONFIGURATION
# ----------------------------------------------------------------------------

# Log level (debug, info, warn, error)
# Default: info
# LOG_LEVEL=info

# Log format (json for production, pretty for development)
# Default: json
# LOG_FORMAT=json


# ============================================================================
# IMPORTANT NOTES
# ============================================================================
#
# 1. COMMENT SYNTAX:
#    - Use '#' at the beginning of a line for comments
#    - Inline comments (after values) are NOT supported
#    - Empty lines are ignored
#
# 2. VALUE FORMAT:
#    - Format: KEY=value
#    - No spaces around the '=' sign
#    - No quotes needed (they will be included in the value if used)
#    - Multi-line values are NOT supported
#
# 3. VARIABLE NAMING:
#    - Use UPPERCASE_WITH_UNDERSCORES
#    - The import script converts underscores to slashes
#    - Example: DAO_GOVERNANCE_DB_USERNAME → dao-governance-db/username
#
# 4. SECURITY:
#    - Never commit files containing real credentials to git
#    - .env.production is in .gitignore (safe)
#    - .env.example is safe to commit (contains no secrets)
#    - Always use strong, unique passwords
#    - Enable 2FA on all provider accounts
#
# 5. IMPORT PROCESS:
#    The PowerShell import script will:
#    - Read each line from this file
#    - Skip comments (lines starting with #)
#    - Parse KEY=value pairs
#    - Convert KEY to lowercase with underscores → slashes
#    - Store in UTS CLI with appropriate encryption flags
#
# 6. CREDENTIAL ROTATION:
#    - Rotate credentials every 90 days
#    - Update this file with new values
#    - Re-import using the import script
#    - Test before deploying to production
#
# ============================================================================
# EXAMPLES OF PROPERLY FORMATTED LINES
# ============================================================================
#
# CORRECT:
# DAO_GOVERNANCE_DB_USERNAME=my_user
# DAO_GOVERNANCE_DB_PASSWORD=MySecureP@ssw0rd!2025
# DAO_GOVERNANCE_DB_HOST=db.example.com
#
# INCORRECT (will not parse correctly):
# DAO_GOVERNANCE_DB_USERNAME = my_user        # Spaces around =
# DAO_GOVERNANCE_DB_PASSWORD="quoted value"   # Quotes will be included
# DAO_GOVERNANCE_DB_HOST=db.example.com       # Inline comment after value
#
# ============================================================================
# CHECKLIST BEFORE IMPORTING
# ============================================================================
#
# [ ] Copied .env.example to .env.production
# [ ] Filled in all database credentials
# [ ] Filled in Novu API credentials
# [ ] Filled in blockchain credentials (if needed)
# [ ] Verified no spaces around = signs
# [ ] Removed any quotes around values
# [ ] Saved the file
# [ ] Ready to import with: Get-Content .env.production | ForEach-Object {...}
#
# ============================================================================
# QUICK IMPORT COMMAND (PowerShell)
# ============================================================================
#
# cd f:\os-main\core\os-workspace\apps\dao-governance-service
# Get-Content .env.production | ForEach-Object {
#     if ($_ -match '^([^=]+)=(.+)$' -and $_ -notmatch '^\s*#') {
#         $key = $matches[1].Trim().ToLower().Replace('_', '/')
#         $value = $matches[2].Trim()
#         $encrypted = if ($key -match 'password|key|secret') { '--encrypted' } else { '' }
#         node uts-cli.js set $key $value $encrypted
#     }
# }
#
# ============================================================================
# SUPPORT
# ============================================================================
#
# For questions or issues:
#   1. Check ZERO_TRUST_README.md for complete documentation
#   2. Check UTS_CLI_GUIDE.md for CLI usage
#   3. Check UTS_SECRETS_CONFIG.md for secret management details
#   4. Contact 371 Minds Infrastructure Team
#
# Last Updated: October 12, 2025
# Version: 1.0.0
# Status: Production Template
#
# ============================================================================
