{
  "nodes": {
    "phase18-voting-simulation": {
      "name": "phase18-voting-simulation",
      "type": "app",
      "data": {
        "root": "apps/phase18-voting-simulation",
        "name": "phase18-voting-simulation",
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/phase18-voting-simulation/src",
        "projectType": "application",
        "tags": [
          "type:app",
          "scope:simulation",
          "phase:18"
        ],
        "targets": {
          "build": {
            "executor": "@nx/js:swc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/phase18-voting-simulation",
              "main": "apps/phase18-voting-simulation/src/index.ts",
              "tsConfig": "apps/phase18-voting-simulation/tsconfig.app.json",
              "format": [
                "cjs",
                "esm"
              ]
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "phase18-voting-simulation:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "phase18-voting-simulation:build:development"
              },
              "production": {
                "buildTarget": "phase18-voting-simulation:build:production"
              }
            },
            "parallelism": true
          },
          "start": {
            "options": {
              "cwd": ".",
              "command": "bun --watch apps/phase18-voting-simulation/src/index.ts"
            },
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "@nx/jest:jest",
            "outputs": [
              "{workspaceRoot}/coverage/{projectRoot}"
            ],
            "options": {
              "jestConfig": "apps/phase18-voting-simulation/jest.config.ts"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          }
        },
        "implicitDependencies": []
      }
    },
    "ping-agent": {
      "name": "ping-agent",
      "type": "app",
      "data": {
        "root": "apps/utility-agents/ping-agent",
        "name": "ping-agent",
        "projectType": "application",
        "tags": [
          "npm:public",
          "npm:ping-agent",
          "npm:network-utility",
          "npm:utility-agent",
          "npm:371-minds",
          "npm:nexe-compatible",
          "npm:standalone-executable",
          "scope:utility",
          "type:application",
          "role:network",
          "packaging:nexe"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "format"
            ]
          },
          "description": "Ping Agent - Network connectivity testing utility agent with Nexe packaging support",
          "js": {
            "packageName": "ping-agent",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun --watch src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "format": {
            "executor": "nx:run-script",
            "options": {
              "script": "format"
            },
            "metadata": {
              "scriptContent": "bunx @biomejs/biome format --write src/",
              "runCommand": "npm run format"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/utility-agents/ping-agent",
              "format": [
                "esm"
              ],
              "bundle": true,
              "main": "apps/utility-agents/ping-agent/src/index.ts",
              "tsConfig": "apps/utility-agents/ping-agent/tsconfig.app.json",
              "assets": [
                "apps/utility-agents/ping-agent/src/assets"
              ],
              "generatePackageJson": true,
              "esbuildOptions": {
                "sourcemap": true,
                "outExtension": {
                  ".js": ".js"
                }
              }
            },
            "configurations": {
              "development": {
                "esbuildOptions": {
                  "sourcemap": true,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              },
              "production": {
                "esbuildOptions": {
                  "sourcemap": false,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              }
            },
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "package": {
            "executor": "nx:run-commands",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "commands": [
                "bun nx build ping-agent:production",
                "cd dist/apps/utility-agents/ping-agent && npx nexe index.js --output ../../../bin/ping-agent.exe --build --verbose"
              ],
              "parallel": false,
              "outputPath": "dist/bin"
            },
            "configurations": {},
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "ping-agent:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "ping-agent:build:development"
              },
              "production": {
                "buildTarget": "ping-agent:build:production"
              }
            },
            "parallelism": true
          },
          "test": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/utility-agents/ping-agent/test",
              "format": [
                "cjs"
              ],
              "bundle": false,
              "main": "apps/utility-agents/ping-agent/src/**/*.test.ts",
              "tsConfig": "apps/utility-agents/ping-agent/tsconfig.spec.json"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "lint": {
            "executor": "@nx/linter:lint",
            "outputs": [
              "{options.outputFile}"
            ],
            "options": {
              "files": [
                "apps/utility-agents/ping-agent/**/*.{ts,tsx,js,jsx}"
              ]
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/utility-agents/ping-agent/src",
        "implicitDependencies": []
      }
    },
    "dao-governance-service": {
      "name": "dao-governance-service",
      "type": "app",
      "data": {
        "root": "apps/dao-governance-service",
        "name": "dao-governance-service",
        "$schema": "../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/dao-governance-service/src",
        "projectType": "application",
        "tags": [],
        "targets": {
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/dao-governance-service",
              "format": [
                "cjs"
              ],
              "bundle": false,
              "main": "apps/dao-governance-service/src/main.ts",
              "tsConfig": "apps/dao-governance-service/tsconfig.app.json",
              "assets": [
                "apps/dao-governance-service/src/assets"
              ],
              "generatePackageJson": true,
              "esbuildOptions": {
                "sourcemap": true,
                "outExtension": {
                  ".js": ".js"
                }
              }
            },
            "configurations": {
              "development": {},
              "production": {
                "esbuildOptions": {
                  "sourcemap": false,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              }
            },
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "prune-lockfile": {
            "dependsOn": [
              "build"
            ],
            "cache": true,
            "executor": "@nx/js:prune-lockfile",
            "outputs": [
              "{workspaceRoot}/dist/apps/dao-governance-service/package.json",
              "{workspaceRoot}/dist/apps/dao-governance-service/package-lock.json"
            ],
            "options": {
              "buildTarget": "build"
            },
            "configurations": {},
            "parallelism": true
          },
          "copy-workspace-modules": {
            "dependsOn": [
              "build"
            ],
            "cache": true,
            "outputs": [
              "{workspaceRoot}/dist/apps/dao-governance-service/workspace_modules"
            ],
            "executor": "@nx/js:copy-workspace-modules",
            "options": {
              "buildTarget": "build"
            },
            "configurations": {},
            "parallelism": true
          },
          "prune": {
            "dependsOn": [
              "prune-lockfile",
              "copy-workspace-modules"
            ],
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          },
          "serve": {
            "continuous": true,
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "dependsOn": [
              "build"
            ],
            "options": {
              "buildTarget": "dao-governance-service:build",
              "runBuildTargetDependencies": false
            },
            "configurations": {
              "development": {
                "buildTarget": "dao-governance-service:build:development"
              },
              "production": {
                "buildTarget": "dao-governance-service:build:production"
              }
            },
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "c-suite-agent-runner": {
      "name": "c-suite-agent-runner",
      "type": "app",
      "data": {
        "root": "apps/c-suite-agent-runner",
        "name": "c-suite-agent-runner",
        "$schema": "../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/c-suite-agent-runner/src",
        "projectType": "application",
        "tags": [],
        "targets": {
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/c-suite-agent-runner",
              "format": [
                "cjs"
              ],
              "bundle": false,
              "main": "apps/c-suite-agent-runner/src/main.ts",
              "tsConfig": "apps/c-suite-agent-runner/tsconfig.app.json",
              "assets": [
                "apps/c-suite-agent-runner/src/assets"
              ],
              "generatePackageJson": true,
              "esbuildOptions": {
                "sourcemap": true,
                "outExtension": {
                  ".js": ".js"
                }
              }
            },
            "configurations": {
              "development": {},
              "production": {
                "esbuildOptions": {
                  "sourcemap": false,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              }
            },
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "prune-lockfile": {
            "dependsOn": [
              "build"
            ],
            "cache": true,
            "executor": "@nx/js:prune-lockfile",
            "outputs": [
              "{workspaceRoot}/dist/apps/c-suite-agent-runner/package.json",
              "{workspaceRoot}/dist/apps/c-suite-agent-runner/package-lock.json"
            ],
            "options": {
              "buildTarget": "build"
            },
            "configurations": {},
            "parallelism": true
          },
          "copy-workspace-modules": {
            "dependsOn": [
              "build"
            ],
            "cache": true,
            "outputs": [
              "{workspaceRoot}/dist/apps/c-suite-agent-runner/workspace_modules"
            ],
            "executor": "@nx/js:copy-workspace-modules",
            "options": {
              "buildTarget": "build"
            },
            "configurations": {},
            "parallelism": true
          },
          "prune": {
            "dependsOn": [
              "prune-lockfile",
              "copy-workspace-modules"
            ],
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          },
          "serve": {
            "continuous": true,
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "dependsOn": [
              "build"
            ],
            "options": {
              "buildTarget": "c-suite-agent-runner:build",
              "runBuildTargetDependencies": false
            },
            "configurations": {
              "development": {
                "buildTarget": "c-suite-agent-runner:build:development"
              },
              "production": {
                "buildTarget": "c-suite-agent-runner:build:production"
              }
            },
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "chief-of-staff-agent": {
      "name": "chief-of-staff-agent",
      "type": "app",
      "data": {
        "root": "apps/chief-of-staff-agent",
        "name": "chief-of-staff-agent",
        "projectType": "application",
        "tags": [
          "npm:public",
          "npm:chief-of-staff",
          "npm:dao-proposals",
          "npm:strategic-orchestration",
          "npm:371-os",
          "npm:governance"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "dev",
              "start",
              "validate"
            ]
          },
          "description": "Chief of Staff Agent (Ortega) - Orchestrates strategic plans into DAO proposals",
          "js": {
            "packageName": "@371minds/chief-of-staff-agent",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "dev": {
            "executor": "nx:run-script",
            "options": {
              "script": "dev"
            },
            "metadata": {
              "scriptContent": "nx serve chief-of-staff-agent",
              "runCommand": "npm run dev"
            },
            "configurations": {},
            "parallelism": true
          },
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "validate": {
            "executor": "nx:run-script",
            "options": {
              "script": "validate"
            },
            "metadata": {
              "scriptContent": "bun src/index.ts --validate",
              "runCommand": "npm run validate"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/chief-of-staff-agent",
              "main": "apps/chief-of-staff-agent/src/index.ts",
              "tsConfig": "apps/chief-of-staff-agent/tsconfig.json",
              "assets": []
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "options": {
              "buildTarget": "chief-of-staff-agent:build"
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bun test apps/chief-of-staff-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bunx @biomejs/biome check --write apps/chief-of-staff-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/chief-of-staff-agent/src",
        "implicitDependencies": []
      }
    },
    "cognitive-interface": {
      "name": "cognitive-interface",
      "type": "app",
      "data": {
        "root": "apps/cognitive-interface",
        "name": "cognitive-interface",
        "projectType": "application",
        "tags": [
          "npm:public",
          "npm:cognitive-ui",
          "npm:adaptive-interface",
          "npm:galaxy-engine",
          "npm:371-os"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "dev"
            ]
          },
          "description": "Revolutionary cognitive-aware interface system for 371 OS",
          "js": {
            "packageName": "@371minds/cognitive-interface",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "dev": {
            "executor": "nx:run-script",
            "options": {
              "script": "dev"
            },
            "metadata": {
              "scriptContent": "nx serve cognitive-interface",
              "runCommand": "npm run dev"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/cognitive-interface",
              "main": "apps/cognitive-interface/src/index.ts",
              "tsConfig": "apps/cognitive-interface/tsconfig.json",
              "assets": []
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "options": {
              "buildTarget": "cognitive-interface:build"
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bun test apps/cognitive-interface"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bunx @biomejs/biome check --write apps/cognitive-interface"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/cognitive-interface/src",
        "implicitDependencies": []
      }
    },
    "intelligent-router": {
      "name": "intelligent-router",
      "type": "app",
      "data": {
        "root": "apps/intelligent-router",
        "name": "intelligent-router",
        "projectType": "application",
        "tags": [
          "npm:public",
          "npm:intelligent-router",
          "npm:task-routing",
          "npm:agent-coordination",
          "npm:371-os",
          "npm:typescript"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "build:tsc",
              "test:watch",
              "format",
              "demo"
            ]
          },
          "description": "Intelligent Router Agent for 371 OS - Central nervous system for task routing",
          "js": {
            "packageName": "intelligent-router",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun run src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "build:tsc": {
            "executor": "nx:run-script",
            "options": {
              "script": "build:tsc"
            },
            "metadata": {
              "scriptContent": "tsc -p tsconfig.app.json",
              "runCommand": "npm run build:tsc"
            },
            "configurations": {},
            "parallelism": true
          },
          "test:watch": {
            "executor": "nx:run-script",
            "options": {
              "script": "test:watch"
            },
            "metadata": {
              "scriptContent": "bun test --watch",
              "runCommand": "npm run test:watch"
            },
            "configurations": {},
            "parallelism": true
          },
          "format": {
            "executor": "nx:run-script",
            "options": {
              "script": "format"
            },
            "metadata": {
              "scriptContent": "bunx @biomejs/biome format --write .",
              "runCommand": "npm run format"
            },
            "configurations": {},
            "parallelism": true
          },
          "demo": {
            "executor": "nx:run-script",
            "options": {
              "script": "demo"
            },
            "metadata": {
              "scriptContent": "bun run src/index.ts",
              "runCommand": "npm run demo"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/intelligent-router",
              "main": "apps/intelligent-router/src/index.ts",
              "tsConfig": "apps/intelligent-router/tsconfig.json",
              "assets": []
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "options": {
              "buildTarget": "intelligent-router:build"
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bun test apps/intelligent-router"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bunx @biomejs/biome check --write apps/intelligent-router"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/intelligent-router/src",
        "implicitDependencies": []
      }
    },
    "elizaos-plugin-nx-workspace": {
      "name": "elizaos-plugin-nx-workspace",
      "type": "lib",
      "data": {
        "root": "packages/nx-workspace",
        "name": "elizaos-plugin-nx-workspace",
        "tags": [
          "npm:public",
          "npm:elizaos",
          "npm:plugin",
          "npm:nx",
          "npm:workspace",
          "npm:self-aware-agents",
          "elizaos",
          "plugin",
          "nx-workspace",
          "self-awareness"
        ],
        "metadata": {
          "targetGroups": {},
          "description": "ElizaOS plugin that enables agents to understand and manipulate their own Nx workspace",
          "js": {
            "packageName": "@elizaos/plugin-nx-workspace",
            "packageVersion": "0.1.0",
            "packageMain": "dist/index.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/packages/elizaos-plugins/nx-workspace",
              "main": "packages/elizaos-plugins/nx-workspace/src/index.ts",
              "tsConfig": "packages/elizaos-plugins/nx-workspace/tsconfig.lib.json",
              "assets": [
                "packages/elizaos-plugins/nx-workspace/*.md"
              ]
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "test": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bun test packages/nx-workspace"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bunx @biomejs/biome check --write packages/nx-workspace"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "packages/elizaos-plugins/nx-workspace/src",
        "projectType": "library",
        "implicitDependencies": []
      }
    },
    "agent-factory": {
      "name": "agent-factory",
      "type": "app",
      "data": {
        "root": "apps/agent-factory",
        "name": "agent-factory",
        "projectType": "application",
        "tags": [
          "npm:public",
          "npm:agent-factory",
          "npm:autonomous-spawning",
          "npm:agent-creation",
          "npm:371-os",
          "npm:typescript",
          "type:app",
          "scope:agent-factory"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "build:tsc",
              "test:watch",
              "format",
              "demo"
            ]
          },
          "description": "Agent Factory Service for 371 OS - Autonomous agent spawning and creation",
          "js": {
            "packageName": "agent-factory",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun run src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "build:tsc": {
            "executor": "nx:run-script",
            "options": {
              "script": "build:tsc"
            },
            "metadata": {
              "scriptContent": "tsc -p tsconfig.app.json",
              "runCommand": "npm run build:tsc"
            },
            "configurations": {},
            "parallelism": true
          },
          "test:watch": {
            "executor": "nx:run-script",
            "options": {
              "script": "test:watch"
            },
            "metadata": {
              "scriptContent": "bun test --watch",
              "runCommand": "npm run test:watch"
            },
            "configurations": {},
            "parallelism": true
          },
          "format": {
            "executor": "nx:run-script",
            "options": {
              "script": "format"
            },
            "metadata": {
              "scriptContent": "bunx @biomejs/biome format --write .",
              "runCommand": "npm run format"
            },
            "configurations": {},
            "parallelism": true
          },
          "demo": {
            "executor": "nx:run-script",
            "options": {
              "script": "demo"
            },
            "metadata": {
              "scriptContent": "bun run src/demo.ts",
              "runCommand": "npm run demo"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/agent-factory",
              "tsConfig": "apps/agent-factory/tsconfig.app.json",
              "packageJson": "apps/agent-factory/package.json",
              "main": "apps/agent-factory/src/index.ts",
              "assets": [
                "apps/agent-factory/src/assets"
              ]
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "dependsOn": [
              "build"
            ],
            "options": {
              "buildTarget": "agent-factory:build",
              "runBuildTargetDependencies": false
            },
            "configurations": {
              "development": {
                "buildTarget": "agent-factory:build:development"
              },
              "production": {
                "buildTarget": "agent-factory:build:production"
              }
            },
            "parallelism": true
          },
          "test": {
            "executor": "@nx/jest:jest",
            "outputs": [
              "{workspaceRoot}/coverage/{projectRoot}"
            ],
            "options": {
              "jestConfig": "apps/agent-factory/jest.config.ts"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "@nx/linter:eslint",
            "outputs": [
              "{options.outputFile}"
            ],
            "options": {
              "lintFilePatterns": [
                "apps/agent-factory/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/agent-factory/src",
        "implicitDependencies": []
      }
    },
    "cao-agent": {
      "name": "cao-agent",
      "type": "app",
      "data": {
        "root": "apps/cao-agent",
        "name": "cao-agent",
        "projectType": "application",
        "tags": [
          "npm:public",
          "npm:cao-agent",
          "npm:performance-monitoring",
          "npm:educational-leadership",
          "npm:agent-assessment",
          "npm:371-minds",
          "npm:unified-architecture",
          "scope:agent",
          "type:application",
          "role:academic"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "format"
            ]
          },
          "description": "Chief Academic Officer (CAO) Agent - Performance monitoring and educational leadership following unified architecture",
          "js": {
            "packageName": "cao-agent",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun --watch src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "format": {
            "executor": "nx:run-script",
            "options": {
              "script": "format"
            },
            "metadata": {
              "scriptContent": "bunx @biomejs/biome format --write src/",
              "runCommand": "npm run format"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/cao-agent",
              "format": [
                "esm"
              ],
              "bundle": false,
              "main": "apps/cao-agent/src/index.ts",
              "tsConfig": "apps/cao-agent/tsconfig.app.json",
              "assets": [
                "apps/cao-agent/src/assets"
              ],
              "generatePackageJson": true,
              "esbuildOptions": {
                "sourcemap": true,
                "outExtension": {
                  ".js": ".js"
                }
              }
            },
            "configurations": {
              "development": {
                "esbuildOptions": {
                  "sourcemap": true,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              },
              "production": {
                "esbuildOptions": {
                  "sourcemap": false,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              }
            },
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "cao-agent:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "cao-agent:build:development"
              },
              "production": {
                "buildTarget": "cao-agent:build:production"
              }
            },
            "parallelism": true
          },
          "test": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/cao-agent/test",
              "format": [
                "cjs"
              ],
              "bundle": false,
              "main": "apps/cao-agent/src/**/*.test.ts",
              "tsConfig": "apps/cao-agent/tsconfig.spec.json"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "lint": {
            "executor": "@nx/linter:lint",
            "outputs": [
              "{options.outputFile}"
            ],
            "options": {
              "files": [
                "apps/cao-agent/**/*.{ts,tsx,js,jsx}"
              ]
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          },
          "deploy:github": {
            "executor": "@nx/workspace:run-commands",
            "options": {
              "command": "echo 'Deploying CAO Agent to Akash via GitHub Actions'"
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/cao-agent/src",
        "implicitDependencies": []
      }
    },
    "ceo-agent": {
      "name": "ceo-agent",
      "type": "app",
      "data": {
        "root": "apps/ceo-agent",
        "name": "ceo-agent",
        "projectType": "application",
        "tags": [
          "npm:public",
          "npm:ceo-agent",
          "npm:strategic-delegation",
          "npm:agent-orchestration",
          "npm:371-minds",
          "npm:unified-architecture",
          "scope:agent",
          "type:application",
          "role:strategic"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "format"
            ]
          },
          "description": "CEO Agent (Mimi) - Strategic delegation and orchestration agent following unified architecture",
          "js": {
            "packageName": "ceo-agent",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun --watch src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "format": {
            "executor": "nx:run-script",
            "options": {
              "script": "format"
            },
            "metadata": {
              "scriptContent": "bunx @biomejs/biome format --write src/",
              "runCommand": "npm run format"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/ceo-agent",
              "format": [
                "esm"
              ],
              "bundle": false,
              "main": "apps/ceo-agent/src/index.ts",
              "tsConfig": "apps/ceo-agent/tsconfig.app.json",
              "assets": [
                "apps/ceo-agent/src/assets"
              ],
              "generatePackageJson": true,
              "esbuildOptions": {
                "sourcemap": true,
                "outExtension": {
                  ".js": ".js"
                }
              }
            },
            "configurations": {
              "development": {
                "esbuildOptions": {
                  "sourcemap": true,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              },
              "production": {
                "esbuildOptions": {
                  "sourcemap": false,
                  "outExtension": {
                    ".js": ".js"
                  }
                }
              }
            },
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "ceo-agent:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "ceo-agent:build:development"
              },
              "production": {
                "buildTarget": "ceo-agent:build:production"
              }
            },
            "parallelism": true
          },
          "test": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/ceo-agent/test",
              "format": [
                "cjs"
              ],
              "bundle": false,
              "main": "apps/ceo-agent/src/**/*.test.ts",
              "tsConfig": "apps/ceo-agent/tsconfig.spec.json"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "lint": {
            "executor": "@nx/linter:lint",
            "outputs": [
              "{options.outputFile}"
            ],
            "options": {
              "files": [
                "apps/ceo-agent/**/*.{ts,tsx,js,jsx}"
              ]
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          },
          "deploy:github": {
            "executor": "@nx/workspace:run-commands",
            "options": {
              "command": "echo 'Deploying CEO Agent to Akash via GitHub Actions'"
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/ceo-agent/src",
        "implicitDependencies": []
      }
    },
    "cfo-agent": {
      "name": "cfo-agent",
      "type": "app",
      "data": {
        "root": "apps/cfo-agent",
        "name": "cfo-agent",
        "projectType": "application",
        "tags": [
          "npm:public"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "dev"
            ]
          },
          "description": "CFO Agent (Maya) - Financial Leadership and Analysis",
          "js": {
            "packageName": "cfo-agent",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun run src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "dev": {
            "executor": "nx:run-script",
            "options": {
              "script": "dev"
            },
            "metadata": {
              "scriptContent": "bun --watch src/index.ts",
              "runCommand": "npm run dev"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/cfo-agent",
              "main": "apps/cfo-agent/src/index.ts",
              "tsConfig": "apps/cfo-agent/tsconfig.json",
              "assets": []
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "options": {
              "buildTarget": "cfo-agent:build"
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bun test apps/cfo-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bunx @biomejs/biome check --write apps/cfo-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/cfo-agent/src",
        "implicitDependencies": []
      }
    },
    "clo-agent": {
      "name": "clo-agent",
      "type": "app",
      "data": {
        "root": "apps/clo-agent",
        "name": "clo-agent",
        "projectType": "application",
        "tags": [
          "npm:public"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "dev"
            ]
          },
          "description": "CLO Agent (Alex) - Legal Compliance and Governance",
          "js": {
            "packageName": "clo-agent",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun run src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "dev": {
            "executor": "nx:run-script",
            "options": {
              "script": "dev"
            },
            "metadata": {
              "scriptContent": "bun --watch src/index.ts",
              "runCommand": "npm run dev"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/clo-agent",
              "main": "apps/clo-agent/src/index.ts",
              "tsConfig": "apps/clo-agent/tsconfig.json",
              "assets": []
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "options": {
              "buildTarget": "clo-agent:build"
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bun test apps/clo-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bunx @biomejs/biome check --write apps/clo-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/clo-agent/src",
        "implicitDependencies": []
      }
    },
    "cto-agent": {
      "name": "cto-agent",
      "type": "app",
      "data": {
        "root": "apps/cto-agent",
        "name": "cto-agent",
        "projectType": "application",
        "tags": [
          "npm:public"
        ],
        "metadata": {
          "targetGroups": {
            "NPM Scripts": [
              "start",
              "dev"
            ]
          },
          "description": "CTO Agent (Zara) - Technical Leadership and Strategy",
          "js": {
            "packageName": "cto-agent",
            "packageVersion": "1.0.0",
            "packageMain": "src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "start": {
            "executor": "nx:run-script",
            "options": {
              "script": "start"
            },
            "metadata": {
              "scriptContent": "bun run src/index.ts",
              "runCommand": "npm run start"
            },
            "configurations": {},
            "parallelism": true
          },
          "dev": {
            "executor": "nx:run-script",
            "options": {
              "script": "dev"
            },
            "metadata": {
              "scriptContent": "bun --watch src/index.ts",
              "runCommand": "npm run dev"
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/cto-agent",
              "main": "apps/cto-agent/src/index.ts",
              "tsConfig": "apps/cto-agent/tsconfig.json",
              "assets": []
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          },
          "serve": {
            "executor": "@nx/js:node",
            "options": {
              "buildTarget": "cto-agent:build"
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bun test apps/cto-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "^production"
            ]
          },
          "lint": {
            "executor": "nx:run-commands",
            "options": {
              "command": "bunx @biomejs/biome check --write apps/cto-agent"
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "inputs": [
              "default",
              "{workspaceRoot}/biome.json"
            ]
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/cto-agent/src",
        "implicitDependencies": []
      }
    },
    "thinng-foundation": {
      "name": "thinng-foundation",
      "type": "lib",
      "data": {
        "root": "packages",
        "name": "thinng-foundation",
        "tags": [
          "npm:private"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "@371minds/thinng-foundation",
            "packageVersion": "1.0.0",
            "packageMain": "./src/index.ts",
            "isInPackageManagerWorkspaces": false
          }
        },
        "targets": {
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/packages",
              "main": "packages/src/index.ts",
              "tsConfig": "packages/tsconfig.lib.json",
              "assets": [
                "packages/*.md"
              ],
              "format": [
                "cjs"
              ],
              "generatePackageJson": true
            },
            "configurations": {},
            "parallelism": true,
            "cache": true,
            "dependsOn": [
              "^build"
            ],
            "inputs": [
              "production",
              "^production"
            ]
          }
        },
        "$schema": "../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "packages/src",
        "projectType": "library",
        "implicitDependencies": []
      }
    }
  },
  "externalNodes": {},
  "dependencies": {
    "phase18-voting-simulation": [
      {
        "source": "phase18-voting-simulation",
        "target": "dao-governance-service",
        "type": "static"
      }
    ],
    "ping-agent": [],
    "dao-governance-service": [
      {
        "source": "dao-governance-service",
        "target": "thinng-foundation",
        "type": "static"
      }
    ],
    "c-suite-agent-runner": [],
    "chief-of-staff-agent": [],
    "cognitive-interface": [
      {
        "source": "cognitive-interface",
        "target": "thinng-foundation",
        "type": "static"
      }
    ],
    "intelligent-router": [],
    "elizaos-plugin-nx-workspace": [],
    "agent-factory": [
      {
        "source": "agent-factory",
        "target": "thinng-foundation",
        "type": "static"
      }
    ],
    "cao-agent": [],
    "ceo-agent": [],
    "cfo-agent": [],
    "clo-agent": [],
    "cto-agent": [],
    "thinng-foundation": []
  },
  "version": "6.0",
  "errors": [],
  "computedAt": 1759766681900
}