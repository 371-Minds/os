///run Biome first, then Jest (integration), then specs:

name: CI - Task Manager API & Agents

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      # Lint everything with Biome
      - name: Lint all projects
        run: npx nx run-many -t lint --all

      # Run Biome tests (agents + libs)
      - name: Run Biome tests
        run: npx nx run-many -t test --all --skip-nx-cache --exclude=api

      # Run Jest integration tests for API only
      - name: Run API integration tests
        run: npx nx test api

      # Validate OpenAPI spec
      - name: Validate OpenAPI spec
        run: npx swagger-cli validate specs/openapi.yaml

      # Run Cucumber BDD feature tests
      - name: Run BDD feature tests
        run: npx cucumber-js specs/tasks.feature --require tests/bdd


 
🔁 How It Works

Build step → Nx compiles libs/agents-core first, then API + agents.

This ensures agents can’t run without a valid, built agents-core.

Test step → Runs all tests (API unit/integration, library tests, etc.).

Spec validation → Confirms openapi.yaml is valid.

BDD execution → Runs Cucumber against tasks.feature.

✅ Benefits

No agent can run with a broken agents-core.

agents-core acts as a single source of utilities, tested independently.

CI guarantees spec compliance + contract testing + BDD validation.

Scales easily when you add new agents (nx run-many auto-includes them).

             

You can enhance this pipeline with:

Contract Validation → check code matches openapi.yaml
(using swagger-cli validate specs/openapi.yaml)

BDD Tests Execution → run cucumber-js on tasks.feature if you want direct Gherkin-based testing

Security Scans → npm audit or snyk integration

Nx build/test

Docker build/push to Docker Hub or GHCR

Akash deploy step (akash tx deployment update)
